//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#define MBN_VARARG



#include "WillemFormCode.h"

 //----------Hieronder mijn toegevoegde include files----------------------------------

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>

#include "mbn.h"

unsigned int trackBar3Position, faderPosition;
unsigned int count, count1, count2, toestand;

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"


#define LF_APP 1
#define LF_CB  2
#define LF_OBJ 3
#define LF_ADR 4



TWillemForm1 *WillemForm1;

static int online = 0;
int checkBox1;


//  Callback functies
void mOnlineStatus(struct mbn_handler *mbn, unsigned long addr, char valid)
{
	if( valid )
		online = (int)valid;

}

float vuValueL, vuValueR, vuValueL2, vuValueR2, vuValueL3, vuValueR3, vuValueL4, vuValueR4, vuValueL5, vuValueR5, vuValueL6, vuValueR6;
char bufferVuMeter[32];



int mSensorDataChanged(struct mbn_handler *mbn, struct mbn_message *msg, unsigned short obj, unsigned char type, union mbn_data dat)
{

	return 0;
}


int mSetActuatorData(struct mbn_handler *mbn, unsigned short obj, union mbn_data dat)
{
	if ( obj > 1047 )                // Logger
	{
		if (checkBox1 == 1 )
		{
			char Temp[32];
			sprintf(Temp, "#%04d_%04d", obj,  (int)dat.UInt);
			WillemForm1->memLog2->Lines->Add(Temp);
		}
	}



	//------------------------------------- Vu Meters 1  Links
	if ( obj == 1036 )
	{

		int ValueL = (int)dat.Float;
		if ( ValueL > -50 )
		{

			vuValueL = 50+dat.Float;
			vuValueL = ((vuValueL)*10);

		}
		else
		{
			vuValueL = 0;
		}


	}
	else if ( obj == 1037 )
	{

		int ValueR = (int)dat.Float;             // Rechts
		if ( ValueR > -50 )
		{

			vuValueR = 50+dat.Float;
			vuValueR = ((vuValueR)*10);

		}
		else
		{
			vuValueR = 0;
		}
	}
	//------------------------------------------ Vu Meters 2    Links
	if ( obj == 1038 )
	{

		int ValueL2 = (int)dat.Float;
		if ( ValueL2 > -50 )
		{

			vuValueL2 = 50+dat.Float;
			vuValueL2 = ((vuValueL2)*10);

		}
		else
		{
			vuValueL2 = 0;
		}


	}
	else if ( obj == 1039 )
	{

		int ValueR2 = (int)dat.Float;         // Rechts
		if ( ValueR2 > -50 )
		{

			vuValueR2 = 50+dat.Float;
			vuValueR2 = ((vuValueR2)*10);

		}
		else
		{
			vuValueR2 = 0;
		}
	}

	//------------------------------------------ Vu Meters 3    Links
	if ( obj == 1040 )
	{

		int ValueL3 = (int)dat.Float;
		if ( ValueL3 > -50 )
		{

			vuValueL3 = 50+dat.Float;
			vuValueL3 = ((vuValueL3)*10);

		}
		else
		{
			vuValueL3 = 0;
		}


	}
	else if ( obj == 1041 )
	{

		int ValueR3 = (int)dat.Float;         // Rechts
		if ( ValueR3 > -50 )
		{

			vuValueR3 = 50+dat.Float;
			vuValueR3 = ((vuValueR3)*10);

		}
		else
		{
			vuValueR3 = 0;
		}
	}

	//------------------------------------------ Vu Meters 4    Links
	if ( obj == 1042 )
	{

		int ValueL4 = (int)dat.Float;
		if ( ValueL4 > -50 )
		{

			vuValueL4 = 50+dat.Float;
			vuValueL4 = ((vuValueL4)*10);

		}
		else
		{
			vuValueL4 = 0;
		}


	}
	else if ( obj == 1043 )
	{

		int ValueR4 = (int)dat.Float;         // Rechts
		if ( ValueR4 > -50 )
		{

			vuValueR4 = 50+dat.Float;
			vuValueR4 = ((vuValueR4)*10);

		}
		else
		{
			vuValueR4 = 0;
		}
	}

	//------------------------------------------ Vu Meters 5    Links
	if ( obj == 1044 )
	{

		int ValueL5 = (int)dat.Float;
		if ( ValueL5 > -50 )
		{

			vuValueL5 = 50+dat.Float;
			vuValueL5 = ((vuValueL5)*10);

		}
		else
		{
			vuValueL5 = 0;
		}


	}
	else if ( obj == 1045 )
	{

		int ValueR5 = (int)dat.Float;         // Rechts
		if ( ValueR5 > -50 )
		{

			vuValueR5 = 50+dat.Float;
			vuValueR5 = ((vuValueR5)*10);

		}
		else
		{
			vuValueR5 = 0;
		}
	}


	//------------------------------------------ Vu Meters 6    Links
	if ( obj == 1046 )
	{

		int ValueL6 = (int)dat.Float;
		if ( ValueL6 > -50 )
		{

			vuValueL6 = 50+dat.Float;
			vuValueL6 = ((vuValueL6)*10);

		}
		else
		{
			vuValueL6 = 0;
		}


	}
	else if ( obj == 1047 )
	{

		int ValueR6 = (int)dat.Float;         // Rechts
		if ( ValueR6 > -50 )
		{

			vuValueR6 = 50+dat.Float;
			vuValueR6 = ((vuValueR6)*10);

		}
		else
		{
			vuValueR6 = 0;
		}
	}




// ---------------------------- Oled Display Text -------------------------------------------
	if (obj == 1024)
	{
		char buf[16];
		sprintf(buf, "%s", dat.Octets);
		WillemForm1->LCD1line1->Caption = buf;
	}
	else if (obj == 1030)
	{
		char buf[16];
		sprintf(buf, "%s", dat.Octets);
		WillemForm1->LCD1line2->Caption = buf;
	}
	else if (obj == 1025)
	{
		char buf[16];
		sprintf(buf, "%s", dat.Octets);
		WillemForm1->LCD2line1->Caption = buf;
	}
	else if (obj == 1031)
	{
		char buf[16];
		sprintf(buf, "%s", dat.Octets);
		WillemForm1->LCD2line2->Caption = buf;
	}

	//else if (obje >= 1138 && obje <= 1191)
//
//	else if (obj == 1138 )
//	{
//		//PGM label
//		if (dat.State)
//		{
//			WillemForm1->Label1->Caption="PGM";
//		}
//		else
//		{
//			WillemForm1->Label1->Caption="";
//		}
//	}
//
//	else if (obj == 1144 )
//	{
//		if (dat.State)
//			WillemForm1->Label3->Caption="SUB";
//		else
//			WillemForm1->Label3->Caption="";
//	}
//	else if (obj == 1144 )
//	{
//		if (dat.State)
//			WillemForm1->Label46->Caption="SUB";
//		else
//			WillemForm1->Label46->Caption="";
//	}

	//---------------------------------------------------------------------------
	// labels als knoppen

	else if (obj == 1195)      //source
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->SourceLabel->Color = clLime;
		else
		  WillemForm1->SourceLabel->Color = clInactiveCaption;

	}
	else if (obj == 1192)    //prog
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label6->Color = clLime;
		else
		  WillemForm1->Label6->Color = clInactiveCaption;

	}
	else if (obj == 1193)    //sub
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label20->Color = clLime;
		else
		  WillemForm1->Label20->Color = clInactiveCaption;

	}
	else if (obj == 1194)    //dump
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label21->Color = clLime;
		else
		  WillemForm1->Label21->Color = clInactiveCaption;

	}

	else if (obj == 1072)    //pfl mod1
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label7->Color = clLime;
		else
		  WillemForm1->Label7->Color = clInactiveCaption;

	}
	else if (obj == 1197)    //aux
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label45->Color = clLime;
		else
		  WillemForm1->Label45->Color = clInactiveCaption;

	}
		else if (obj == 1073)    //pfl mod2
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label41->Color = clLime;
		else
		  WillemForm1->Label41->Color = clInactiveCaption;

	}






	// labels als knoppen
	else if (obj == 1230)    //prog mon1 crm
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label25->Color = clLime;
		else
		  WillemForm1->Label25->Color = clInactiveCaption;

	}
	else if (obj == 1232)    //sub mon1 crm
	{

		int t=(int)dat.UInt;
		if( t > 0 )
		  WillemForm1->Label40->Color = clLime;
		else
		  WillemForm1->Label40->Color = clInactiveCaption;
	}
	else if (obj == 1234)    //aux mon1 crm
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label42->Color = clLime;
		else
		  WillemForm1->Label42->Color = clInactiveCaption;

	}
		else if (obj == 1236)    //pfl mon1 crm
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label29->Color = clLime;
		else
		  WillemForm1->Label29->Color = clInactiveCaption;

	}











	// labels als knoppen
	else if (obj == 1231)    //prog mon1 crm
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label23->Color = clLime;
		else
		  WillemForm1->Label23->Color = clInactiveCaption;

	}
	else if (obj == 1233)    //sub mon1 crm
	{

		int t=(int)dat.UInt;
		if( t > 0 )
		  WillemForm1->Label43->Color = clLime;
		else
		  WillemForm1->Label43->Color = clInactiveCaption;
	}
	else if (obj == 1235)    //aux mon1 crm
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label44->Color = clLime;
		else
		  WillemForm1->Label44->Color = clInactiveCaption;

	}
		else if (obj == 1237)    //pfl mon1 crm
	{

		int t=dat.UInt;
		if( t > 0 )
		  WillemForm1->Label24->Color = clLime;
		else
		  WillemForm1->Label24->Color = clInactiveCaption;

	}









// ---------------------------- Oled Log Data to memLog2 -------------------------------------------
//
//	if (obj >= 1036 && obj <= 1047)
//	{
//		char Temp[32];
//		unsigned int Value = 132+((unsigned int)dat.Float);
//		Value = ((Value)*7);
//		sprintf(Temp, "#%04d_%04d", obj,  Value);
//		WillemForm1->memLog2->Lines->Add(Temp);
//	}
//	else if (obj > 1047)
//	{
//		char Temp[32];
//		sprintf(Temp, "%04d_%04d", obj, (int)dat.UInt);
//		WillemForm1->memLog2->Lines->Add(Temp);
//	}



	return 0;
}

//---------------------------------------------------------------------------
__fastcall TWillemForm1::TWillemForm1(TComponent* Owner)
        : TForm(Owner)
{
	iflist = 0;
}
//---------------------------------------------------------------------------



void __fastcall TWillemForm1::FormCreate(TObject *Sender)
{
	char err[MBN_ERRSIZE], ifdesc[512];
	struct mbn_if_ethernet *n;
	
    if((iflist = mbnEthernetIFList(err)) == 0)
	{
        //addlog(LF_APP, "Error getting interface list: %s", err);
		UDPEdit->Text = "Willem";
	}
    else
	{
        lstInterfaces->Items->Clear();
		
		for(n=iflist; n!=0; n=n->next)
        {
            sprintf(ifdesc, "%02X:%02X:%02X:%02X:%02X:%02X", n->addr[0], n->addr[1], n->addr[2], n->addr[3], n->addr[4], n->addr[5]);
            lstInterfaces->Items->AddObject(ifdesc, (TObject *)n->name);
        }

		lstInterfaces->ItemIndex = 0;

	}


	// iterate through all controls on Form1  TWillemForm1->ControlCount

	for (int i = 0; i < WillemForm1->ControlCount ; i++)
	{
		// disable the control by setting Enabled property to false

		WillemForm1->Controls[i]->Enabled = false;

	}

	CheckBox1->Checked = true;

		checkBox1=1;


	btnOpen->Enabled = true;
	UDPEdit->Enabled = true;
	Button2->Enabled = true;
	Button9->Enabled = true;
	Button10->Enabled = true;
	Button11->Enabled = true;
    Button12->Enabled = true;

	//----------------------------------------------------- Read from file
	std::string fileContent;
	std::ifstream file;
	//std::ifstream inputFile;
	std::string ipString;
	std::string crmStdPot;
	std::string	faders;

	char Temp[16];

   file.open("settings.txt");


   if (file.is_open())
   {
		std::string line;

		while (std::getline(file, line))
		{
			if (line.find("ip address  = ") != std::string::npos)
			{
				ipString = line.c_str();
			}
			if (line.find("monitorPots = ") != std::string::npos)
			{
				crmStdPot = line.c_str();
			}
			if (line.find("faders      = ") != std::string::npos)
			{
				faders = line.c_str();
			}
		}

		file.close();
	}
	else
	{
		std::cout << "Unable to open file ip.txt" << std::endl;
	}

	String s = ipString.c_str();
	int text = s.Length();
	StrPCopy(Temp, s.SubString1( 15 , text-2 ));
	UDPEdit->Text = Temp;
	memLog->Text = online;

	String s2 = ipString.c_str();
	int text2 = s2.Length();
	StrPCopy(Temp, s2.SubString1( 15 , text2-2 ));
	memLog->Lines->Add(Temp);

	String s3 = crmStdPot.c_str();
	int text3 = s3.Length();
	StrPCopy(Temp, s3.SubString1( 15 , text3-2 ));
	memLog->Lines->Add(Temp);
	trackBar3Position = StrToInt(Temp);

	String s4 = faders.c_str();
	int text4 = s4.Length();
	StrPCopy(Temp, s4.SubString1( 15 , text4-2 ));
	memLog->Lines->Add(Temp);
	faderPosition = StrToInt(Temp);
	//--------------------------------------------------------

}
//---------------------------------------------------------------------------






int oldOnline, started;
static int oldtst, oldtstR, oldtst2, oldtstR2, newtst;

void __fastcall TWillemForm1::RefreshTimerTimer(TObject *Sender)
{
        if ( online != oldOnline)
        {
			memLog->Lines->Add(online);
			started=1;
			//WillemForm1->Label7->Click();
			TimerStartDelay->Enabled = true;

		}

		online = oldOnline;


		if ( started )
		{
			//RefreshTimer->Enabled = false;

			if (oldtst > 0)         oldtst = oldtst - 3;
			if (oldtst < 0)         oldtst = vuValueL;
			if (oldtst < vuValueL)  oldtst = vuValueL;


		   if (oldtstR > 0)         oldtstR = oldtstR - 3;
		   if (oldtstR < 0)         oldtstR = vuValueR;
		   if (oldtstR < vuValueR)  oldtstR = vuValueR;

		   //oldtst = CorrTabel( oldtst );

		   if (oldtst2 > 0)         oldtst2 = oldtst2 - 3;
		   if (oldtst2 < 0)         oldtst2 = vuValueL2;
		   if (oldtst2 < vuValueL2)  oldtst2 = vuValueL2;


		   if (oldtstR2 > 0)         oldtstR2 = oldtstR2 - 3;
		   if (oldtstR2 < 0)         oldtstR2 = vuValueR2;
		   if (oldtstR2 < vuValueR2)  oldtstR2 = vuValueR2;



		   ProgressBar1->Position = oldtst;
		   ProgressBar2->Position = oldtstR;

		   ProgressBar3->Position = oldtst2;
		   ProgressBar4->Position = oldtstR2;
//
		   ProgressBar5->Position = vuValueL4;
		   ProgressBar6->Position = vuValueR4;
//
		   ProgressBar7->Position = vuValueL5;
		   ProgressBar8->Position = vuValueR5;
//
		   ProgressBar9->Position = vuValueL6;
		   ProgressBar10->Position = vuValueR6;
//
//		   ProgressBar11->Position = oldtst;
//		   ProgressBar12->Position = oldtstR;
//
//		   ProgressBar13->Position = oldtst;
//		   ProgressBar14->Position = oldtstR;
//
		   ProgressBar15->Position = vuValueL3;
		   ProgressBar16->Position = vuValueR3;

//			char Temp[32];
//			sprintf(Temp, "#%04d_%04d\n\r #%04d_%04d", 1088, vuValueL, 1089, vuValueR);
//			memLog->Lines->Add(Temp);




//			if (checkBox1 == 1 )
//			{
//				char Temp[32];
//				sprintf(Temp, "#%04d_%04d #%04d_%04d", 1088, (int)vuValueL, 1089, (int)vuValueR);
//				memLog->Lines->Add(Temp);
//			}



		}



		double tst=1;
}









//---------------------------------------------------------------------------



void __fastcall TWillemForm1::Button1Click(TObject *Sender)
{
	count = count1 = count2 = toestand = 0;
	TimerStartDelay->Enabled = true;
//	static int toggle;
//
//	if( toggle )
//		WillemForm1->RefreshTimer->Enabled = false;
//	else
//		WillemForm1->RefreshTimer->Enabled = true;
//	toggle = !toggle;
}
//---------------------------------------------------------------------------



void __fastcall TWillemForm1::CheckBox1Click(TObject *Sender)
{

	if ( CheckBox1->Checked == True )
	{
		checkBox1=1;
	}
	else
	{
	  checkBox1=0;
	}
	//memLog->Lines->Add(plus10dB);
}







//---------------------------------------------------------------------------
void __fastcall TWillemForm1::Label25Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1230, d);    // Prog mon1 crm
}
//---------------------------------------------------------------------------
void __fastcall TWillemForm1::Label40Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1232, d);    // sub mon1 crm
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Label42Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1234, d);    // aux mon1 crm
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Label29Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1236, d);    // pfl mon1 crm
}
//---------------------------------------------------------------------------










//---------------------------------------------------------------------------
void __fastcall TWillemForm1::Label23Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1231, d);    // Prog mon2 studio
}
//---------------------------------------------------------------------------
void __fastcall TWillemForm1::Label43Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1233, d);    // sub mon2 studio
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Label44Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1235, d);    // aux mon2 studio
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Label24Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1237, d);    // pfl mon2 studio
}
//---------------------------------------------------------------------------








//---------------------------------------------------------------------------
void __fastcall TWillemForm1::Label7Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1072, d);    // PFL
}
//---------------------------------------------------------------------------
void __fastcall TWillemForm1::Label21Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1194, d);    // dump
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Label20Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1193, d);    // sub
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Label6Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1192, d);    // prog
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::SourceLabelClick(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1195, d);   // Source
}

//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Label45Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 1;
	mbnUpdateSensorData(mbn, 1197, d);   // Source
}

//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Label41Click(TObject *Sender)
{
	union mbn_data d;
	d.SInt = 0;
	mbnUpdateSensorData(mbn, 1073, d);   // Source
}

//---------------------------------------------------------------------------




void __fastcall TWillemForm1::Button7Click(TObject *Sender)
{
	 union mbn_data d;
	 d.SInt = 1;
	 mbnUpdateSensorData(mbn, 1054, d);    //<---------------------- Contact encoder switch
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Button5Click(TObject *Sender)
{
	 union mbn_data d;
	 d.SInt = 1;
	 mbnUpdateSensorData(mbn, 1048, d);    //<---------------------- Contact encoder plus
	 d.SInt = 0;
	 mbnUpdateSensorData(mbn, 1048, d);
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Button3Click(TObject *Sender)
{
	 union mbn_data d;
	 d.SInt = -1;
	 mbnUpdateSensorData(mbn, 1048, d);    //<---------------------- Contact encoder min
	 d.SInt = 0;
	 mbnUpdateSensorData(mbn, 1048, d);
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Button8Click(TObject *Sender)
{
	 union mbn_data d;
	 d.SInt = 1;
	 mbnUpdateSensorData(mbn, 1055, d);    //<---------------------- Contact encoder switch
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Button6Click(TObject *Sender)
{
	 union mbn_data d;
	 d.SInt = 1;
	 mbnUpdateSensorData(mbn, 1049, d);    //<---------------------- Contact encoder plus
	 d.SInt = 0;
	 mbnUpdateSensorData(mbn, 1049, d);
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Button4Click(TObject *Sender)
{
	 union mbn_data d;
	 d.SInt = -1;
	 mbnUpdateSensorData(mbn, 1049, d);    //<---------------------- Contact encoder min
	 d.SInt = 0;
	 mbnUpdateSensorData(mbn, 1049, d);
}
//---------------------------------------------------------------------------


void __fastcall TWillemForm1::TrackBar1Change(TObject *Sender)
{
	union mbn_data d;
	int value = WillemForm1->TrackBar1->Position;
	value = 1023 - value;
	d.UInt = value;

	mbnUpdateSensorData(mbn, 1084, d);         // Fader module 1
}

//---------------------------------------------------------------------------

void __fastcall TWillemForm1::TrackBar2Change(TObject *Sender)
{
	union mbn_data d;
	int value = WillemForm1->TrackBar2->Position;
	value = 0;
	d.UInt = value;

	mbnUpdateSensorData(mbn, 1085, d);     // Fader module 2
}

//---------------------------------------------------------------------------








void __fastcall TWillemForm1::Button2Click(TObject *Sender)
{
	// Execute the Notepad application
	system("notepad.exe settings.txt");

	//ShellExecute(0, L"open", L"notepad.exe settings.txt", 0, 0, SW_SHOW);

	//ShellExecute(0, 0, L"notepad.exe | ip.txt", 0, 0, SW_SHOW);
}


//---------------------------------------------------------------------------


//int count;

//void sendToTrackBar(unsigned int fdrObject, unsigned int putInt)
//{
//	union mbn_data d;
//	unsigned int valueT = 1023 - putInt;
//	d.UInt = valueT;
//	mbnUpdateSensorData(WillemForm1->mbn, fdrObject, d);         // Fader module 1
//	WillemForm1->memLog->Lines->Add(putInt);
//}



//void __fastcall TWillemForm1::TimerStartDelayTimer(TObject *Sender)
//{
//
//	if ( toestand == 0 )
//	{
//		TrackBar1->Position = count1;
//
//		//sendToTrackBar(1084, count1);
//
//		count1 = count1 + 40;
//
//		if ( count1 > faderPosition )
//		{
//			toestand++;
//			count1=faderPosition;
//		}
//	}
//
//	else if ( toestand == 1 )
//	{
//		TrackBar1->Position = count1;
//
//		//sendToTrackBar(1084, count1);
//
//		count1 = count1 - 40;
//
//		if ( count1 < 80 )
//		{
//			toestand++;
//			count1=0;
//		}
//	}
//
//   //--------------------------------------------------------------------------------
//	else if ( toestand == 2 )
//	{
//		TrackBar3->Position = count1;
//
//		//sendToTrackBar(1339, count1);
//
//		count1 = count1 + 40;
//
//		if ( count1 > trackBar3Position )
//		{
//			toestand++;
//			count1=0;
//		}
//	}
//
//	//---------------------------
//	else if ( toestand == 3 )
//	{
//		TrackBar4->Position = count1;
//
//		//sendToTrackBar(1340, count1);
//
//		count1 = count1 + 40;
//
//		if ( count1 > trackBar3Position )
//		{
//			toestand++;
//			count1=0;
//		}
//	}
//
//   //---------------------------------------------------------------
//	else if ( toestand == 4 )
//	{
//		TrackBar5->Position = count1;
//
//		//sendToTrackBar(1341, count1);
//
//		count1 = count1 + 40;
//
//		if ( count1 > trackBar3Position )
//		{
//			toestand++;
//			count1=0;
//		}
//	}
//
//	//---------------------------
//	else if ( toestand == 5 )
//	{
//		TrackBar6->Position = count1;
//
//		//sendToTrackBar(1341, count1);
//
//		count1 = count1 + 40;
//
//		if ( count1 > trackBar3Position )
//		{
//			toestand++;
//			count1=0;
//		}
//	}
//
//
////-----------------------------------------------------------------------------------------------------------
//	if ( toestand == 6 )
//	{
//		TrackBar2->Position = -1000;
//	}
//
//
//
//	count+=20;
//
//	if ( count > 6022)
//	{
//		TimerStartDelay->Enabled = false;
//		memLog->Lines->Add("TimerStartDelay = false");
//
//
//
//		//memLog->Lines->Add(count2);
//	}
//}


//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Button9Click(TObject *Sender)
{
	//system("Call PUTTY.EXE");
	ShellExecute(0, L"open", L"PUTTY.EXE", 0, 0, SW_SHOW);

}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Button10Click(TObject *Sender)
{
	//system("filezilla\\filezilla.exe");
	ShellExecute(0, L"open", L"filezilla\\filezilla.exe", 0, 0, SW_SHOW);
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::Button11Click(TObject *Sender)
{
	  //system("ADVIPSCN\\advanced_ip_scanner.exe");
	  ShellExecute(0, L"open", L"ADVIPSCN\\advanced_ip_scanner.exe", 0, 0, SW_SHOW);
}
//-----------ADVIPSCN------------advanced_ip_scanner.exe----------------------------------------------------

void __fastcall TWillemForm1::Button12Click(TObject *Sender)
{
	  system("notepad.exe info.txt");
}
//---------------------------------------------------------------------------

void __fastcall TWillemForm1::OnlineDetectTimerTimer(TObject *Sender)
{
   		if ( started == 0 )
		{
			ShowMessage("Wrong IP address, or axum server is not running");
			OnlineDetectTimer->Enabled = false;
		}
		OnlineDetectTimer->Enabled = false;

}
//---------------------------------------------------------------------------

